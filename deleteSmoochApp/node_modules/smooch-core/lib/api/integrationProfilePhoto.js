'use strict';

exports.__esModule = true;
exports.IntegrationProfilePhotoApi = undefined;

var _base = require('./base');

var _smoochMethod = require('../utils/smoochMethod');

var _smoochMethod2 = _interopRequireDefault(_smoochMethod);

var _formData = require('../utils/formData');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * @constructor
 * @name IntegrationProfilePhotoApi
 * @extends BaseApi
 */
var IntegrationProfilePhotoApi = exports.IntegrationProfilePhotoApi = function (_BaseApi) {
    _inherits(IntegrationProfilePhotoApi, _BaseApi);

    function IntegrationProfilePhotoApi() {
        _classCallCheck(this, IntegrationProfilePhotoApi);

        var _this = _possibleConstructorReturn(this, _BaseApi.apply(this, arguments));

        _this.allowedAuth = ['jwt'];
        return _this;
    }

    IntegrationProfilePhotoApi.prototype.validateSource = function validateSource(source) {
        if (!source) {
            throw new Error('Must provide source.');
        }
    };

    return IntegrationProfilePhotoApi;
}(_base.BaseApi);

Object.assign(IntegrationProfilePhotoApi.prototype, {
    /**
     * Upload a photo to be used for the integration's profile.
     * @memberof IntegrationProfileApi.prototype
     * @method update
     * @param  {object} source
     * @return {APIResponse}
     */
    upload: (0, _smoochMethod2.default)({
        params: ['integrationId', 'source'],
        path: '/integrations/:integrationId/profile/photo',
        func: function upload(url, integrationId, source) {
            this.validateSource(source);
            return this.request('PUT', url, (0, _formData.getFormData)(source));
        }
    })
});