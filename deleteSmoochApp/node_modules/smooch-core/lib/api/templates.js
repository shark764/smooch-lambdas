'use strict';

exports.__esModule = true;
exports.TemplatesApi = undefined;

var _base = require('./base');

var _smoochMethod = require('../utils/smoochMethod');

var _smoochMethod2 = _interopRequireDefault(_smoochMethod);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * @constructor
 * @name TemplatesApi
 * @extends BaseApi
 */
var TemplatesApi = exports.TemplatesApi = function (_BaseApi) {
    _inherits(TemplatesApi, _BaseApi);

    function TemplatesApi() {
        _classCallCheck(this, TemplatesApi);

        var _this = _possibleConstructorReturn(this, _BaseApi.apply(this, arguments));

        _this.allowedAuth = ['jwt'];
        return _this;
    }

    return TemplatesApi;
}(_base.BaseApi);

Object.assign(TemplatesApi.prototype, {
    /**
     * Create a template
     * @memberof TemplatesApi.prototype
     * @method create
     * @param  {Object} props
     * @return {APIResponse}
     */
    create: (0, _smoochMethod2.default)({
        params: ['props'],
        path: '/templates',
        func: function create(url, props) {
            if (!props) {
                return Promise.reject(new Error('Must provide props.'));
            }

            if (!props.name) {
                return Promise.reject(new Error('Must provide name for your template.'));
            }

            if (!props.message) {
                return Promise.reject(new Error('Must provide message for your template.'));
            }

            return this.request('POST', url, props);
        }
    }),

    /**
     * List templates
     * @memberof TemplatesApi.prototype
     * @method list
     * @param  {Object} props
     * @return {APIResponse}
     */
    list: (0, _smoochMethod2.default)({
        params: ['props'],
        optional: ['props'],
        path: '/templates',
        func: function list(url) {
            var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

            var queryParams = {
                limit: props.limit,
                offset: props.offset
            };

            var paramAdded = false;

            Object.keys(queryParams).forEach(function (paramKey) {
                var param = queryParams[paramKey];

                if (param === undefined) {
                    return;
                }

                if (!paramAdded) {
                    url += '?' + paramKey + '=' + queryParams[paramKey];
                } else {
                    url += '&' + paramKey + '=' + queryParams[paramKey];
                }

                paramAdded = true;
            });

            return this.request('GET', url);
        }
    }),

    /**
     * Get a template
     * @memberof TemplatesApi.prototype
     * @method get
     * @return {APIResponse}
     */
    get: (0, _smoochMethod2.default)({
        params: ['templateId'],
        path: '/templates/:templateId',
        method: 'GET'
    }),

    /**
     * Update a template
     * @memberof TemplatesApi.prototype
     * @method update
     * @param  {Object} props
     * @return {APIResponse}
     */
    update: (0, _smoochMethod2.default)({
        params: ['templateId', 'props'],
        path: '/templates/:templateId',
        func: function update(url, templateId, props) {
            if (!props) {
                return Promise.reject(new Error('Must provide props.'));
            }

            if (!props.name && !props.message) {
                return Promise.reject(new Error('Must provide either name or message to update.'));
            }

            return this.request('PUT', url, props);
        }
    }),

    /**
     * Delete a template
     * @memberof TemplatesApi.prototype
     * @method delete
     * @return {APIResponse}
     */
    delete: (0, _smoochMethod2.default)({
        params: ['templateId'],
        path: '/templates/:templateId',
        method: 'DELETE'
    })
});