// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`smooch-webhook createInteraction calls axios correctly 1`] = `
Array [
  Array [
    Object {
      "auth": "auth",
      "data": Object {
        "artifactType": "messaging-transcript",
      },
      "method": "post",
      "url": "https://us-east-1-dev-edge.domain/v1/tenants/mock-tenant-id/interactions/new-interaction-id/artifacts",
    },
  ],
  Array [
    Object {
      "auth": "auth",
      "data": Object {
        "channelType": undefined,
        "contactPoint": "contactPoint",
        "customer": "firstName lastName",
        "direction": "inbound",
        "id": "new-interaction-id",
        "interaction": Object {
          "artifactId": "mock-artifact-id",
          "customerMetadata": Object {
            "id": "firstName lastName",
            "webClientProperties": Object {
              "customer": "firstName lastName",
            },
          },
        },
        "metadata": Object {
          "appId": "mock-app-id",
          "artifactId": "mock-artifact-id",
          "customer": "firstName lastName",
          "firstCustomerMessageTimestamp": 10,
          "latestMessageSentBy": "customer",
          "participants": Array [],
          "smoochIntegrationId": "mock-integration-id",
          "source": undefined,
          "userId": "mock-user-id",
        },
        "source": "smooch",
        "tenantId": "mock-tenant-id",
      },
      "method": "post",
      "url": "https://us-east-1-dev-edge.domain/v1/tenants/mock-tenant-id/interactions",
    },
  ],
]
`;

exports[`smooch-webhook createInteraction calls docClient.get() correctly 1`] = `
Array [
  Array [
    Object {
      "Key": Object {
        "id": "mock-integration-id",
        "tenant-id": "mock-tenant-id",
      },
      "TableName": "us-east-1-dev-smooch",
    },
  ],
]
`;

exports[`smooch-webhook createInteraction calls docClient.put() correctly 1`] = `
Array [
  Array [
    Object {
      "ConditionExpression": "attribute_not_exists(SmoochUserId) OR (attribute_exists(SmoochUserId) AND attribute_not_exists(InteractionId) AND CreatingSmoochMessageId = :m)",
      "ExpressionAttributeValues": Object {
        ":m": "mock-smoochMessage-id",
      },
      "Item": Object {
        "CreatingSmoochMessageId": "mock-smoochMessage-id",
        "SmoochUserId": "mock-user-id",
        "TTL": 1589391936,
      },
      "TableName": "us-east-1-dev-smooch-interactions",
    },
  ],
]
`;

exports[`smooch-webhook createInteraction calls docClient.update() correctly 1`] = `
Array [
  Array [
    Object {
      "ExpressionAttributeValues": Object {
        ":c": Array [],
        ":i": "new-interaction-id",
      },
      "Key": Object {
        "SmoochUserId": "mock-user-id",
      },
      "TableName": "us-east-1-dev-smooch-interactions",
      "UpdateExpression": "set InteractionId = :i, CollectActions = :c",
    },
  ],
]
`;

exports[`smooch-webhook createInteraction returns when the interaction is dead 1`] = `
Array [
  Array [
    Object {
      "ConditionExpression": "InteractionId <> :i OR CreatingSmoochMessageId = :m",
      "ExpressionAttributeValues": Object {
        ":i": "interaction-404",
        ":m": "mock-smoochMessage-id",
      },
      "Item": Object {
        "SmoochUserId": "mock-user-id",
      },
      "TableName": "us-east-1-dev-smooch-interactions",
      "UpdateExpression": "set CreatingSmoochMessageId: :m, InteractionId = :i",
    },
  ],
]
`;

exports[`smooch-webhook createInteraction throws an error when there is a problem creating artifact 1`] = `"Error creating artifact"`;

exports[`smooch-webhook createInteraction throws an error when there is a problem retrieving smooch integration from DynamoDB 1`] = `"Failed to retrieve Smooch integration from DynamoDB"`;

exports[`smooch-webhook handleCollectMessageResponse calls sendCustomerMessageToParticipants correctly 1`] = `
Array [
  Array [
    Object {
      "auth": "auth",
      "interactionId": "mock-interaction-id",
      "logContext": "logContext",
      "message": "response",
      "tenantId": "mock-tenant-id",
    },
  ],
]
`;

exports[`smooch-webhook handleCollectMessageResponse calls sendFlowActionResponse correctly 1`] = `
Array [
  Array [
    Object {
      "actionId": "actionId",
      "logContext": "logContext",
      "response": "response",
      "subId": "subId",
    },
  ],
]
`;

exports[`smooch-webhook handleCollectMessageResponse calls updateInteractionMetadataAsync correctly 1`] = `
Array [
  Array [
    Object {
      "interactionId": "mock-interaction-id",
      "logContext": "logContext",
      "metadata": Object {
        "artifactId": "mock-artifact-id",
        "collectActions": Array [],
        "latestMessageSentBy": "customer",
        "participants": Array [
          Object {
            "resourceId": "mock-resource-id",
            "sessionId": "mock-session-id",
          },
        ],
      },
      "tenantId": "mock-tenant-id",
    },
  ],
]
`;

exports[`smooch-webhook handleCollectMessageResponse throws an error when there are no action found in pending-actions 1`] = `"Action could not be found in pending-actions"`;

exports[`smooch-webhook handleCollectMessageResponse throws an error when there are no pending actions 1`] = `"There are no pending actions"`;

exports[`smooch-webhook handleCustomerMessage !hasInteractionItem calls createInteraction correctly 1`] = `
Array [
  Array [
    Object {
      "appId": "mock-app-id",
      "auth": "auth",
      "channelType": undefined,
      "customer": "customer",
      "integrationId": "mock-integrationId-id",
      "logContext": "logContext",
      "metadataSource": "web",
      "properties": Object {
        "customer": "customer",
      },
      "smoochMessageId": "mock_id",
      "tenantId": "mock-tenant-id",
      "timestamp": "10",
      "userId": "mock-user-id",
    },
  ],
]
`;

exports[`smooch-webhook handleCustomerMessage !hasInteractionItem calls uploadArtifactFile correctly 1`] = `
Array [
  Array [
    Object {
      "interactionId": "new-interaction-id",
      "tenantId": "mock-tenant-id",
    },
    "mock-artifact-id",
    Object {
      "_id": "mock_id",
      "mediaUrl": "http://mockurl",
      "received": "10",
    },
    "auth",
  ],
]
`;

exports[`smooch-webhook handleCustomerMessage !hasInteractionItem customerIdentifier !== "Customer" 1`] = `"handleCustomerMessage Successful"`;

exports[`smooch-webhook handleCustomerMessage !hasInteractionItem throws an error when failed to upload artifact file 1`] = `"Failed to upload artifact file"`;

exports[`smooch-webhook handleCustomerMessage !hasInteractionItem throws an error when there is a problem creating interaction 1`] = `"Failed to create an interaction"`;

exports[`smooch-webhook handleCustomerMessage !hasInteractionItem throws an error when there is a problem retrieving interaction metadata 1`] = `"An Error ocurred retrieving interaction metadata"`;

exports[`smooch-webhook handleCustomerMessage !hasInteractionItem throws an error when there problem retrieving digital channels credentials (form SmoochCore) 1 1`] = `"An Error has occurred trying to retrieve digital channels credentials"`;

exports[`smooch-webhook handleCustomerMessage !hasInteractionItem throws an error when there problem retrieving digital channels credentials 1`] = `"An Error has occurred trying to retrieve digital channels credentials (form getSecretValue())"`;

exports[`smooch-webhook handleCustomerMessage !hasInteractionItem throws an error when there problem updating Smooch appUser 2 1`] = `"Error updating Smooch appUser"`;

exports[`smooch-webhook handleCustomerMessage !hasInteractionItem updated smoochUser successfully 1`] = `"handleCustomerMessage Successful"`;

exports[`smooch-webhook handleCustomerMessage hasInteractionId and interactionID calls createInteraction correctly 1`] = `
Array [
  Array [
    Object {
      "appId": "mock-app-id",
      "auth": "auth",
      "channelType": undefined,
      "customer": "customer",
      "integrationId": "mock-integrationId-id",
      "isInteractionDead": true,
      "logContext": "logContext",
      "metadataSource": "web",
      "properties": Object {
        "customer": "customer",
      },
      "smoochMessageId": "mock_id",
      "tenantId": "mock-tenant-id",
      "timestamp": "10",
      "userId": "mock-user-id",
    },
  ],
]
`;

exports[`smooch-webhook handleCustomerMessage hasInteractionId and interactionID calls sendCustomerMessageToParticipants correctly 1`] = `
Array [
  Array [
    Object {
      "appId": "mock-app-id",
      "auth": "auth",
      "contentType": "text",
      "interactionId": "mock-interaction-id",
      "logContext": "logContext",
      "message": Object {
        "received": "10",
        "text": "INTERACTION_NOT_FOUND_ERROR",
      },
      "tenantId": "mock-tenant-id",
      "userId": "mock-user-id",
    },
  ],
  Array [
    Object {
      "appId": "mock-app-id",
      "auth": "auth",
      "contentType": "type",
      "interactionId": "new-interaction-id",
      "logContext": "logContext",
      "message": Object {
        "_id": "mock_id",
        "mediaUrl": "http://mockurl",
        "received": "10",
      },
      "metadataSource": "web",
      "tenantId": "mock-tenant-id",
      "userId": "mock-user-id",
    },
  ],
]
`;

exports[`smooch-webhook handleCustomerMessage hasInteractionId and interactionID calls sendSmoochInteractionHeartbeat correctly 1`] = `
Array [
  Array [
    Object {
      "auth": "auth",
      "interactionId": "mock-interaction-id",
      "tenantId": "mock-tenant-id",
    },
  ],
]
`;

exports[`smooch-webhook handleCustomerMessage hasInteractionId and interactionID throws an error when there is a problem creating interaction 1`] = `"Failed to create an interaction"`;

exports[`smooch-webhook handleCustomerMessage hasInteractionId and interactionID throws an error when there is a problem updating latestMessageSentBy flag from metadata 1`] = `"Error updating latestMessageSentBy flag from metadata"`;

exports[`smooch-webhook handleFormResponse collect message response passes in the correct arguments to handleCollectMessageResponse() 1`] = `
Array [
  Array [
    Object {
      "auth": "auth",
      "form": Object {
        "_id": "_id",
        "fields": Array [
          Object {
            "name": "collect-message",
            "text": "example",
          },
        ],
        "name": "Web",
        "quotedMessage": Object {
          "content": Object {
            "metadata": Object {
              "actionId": "actionId",
              "subId": "subId",
            },
          },
        },
        "received": "10",
        "type": "formResponse",
      },
      "interactionId": "mock-interaction-id",
      "logContext": "",
      "tenantId": "mock-tenant-id",
    },
  ],
]
`;

exports[`smooch-webhook handleFormResponse prechat capture passes in the correct arguments to createInteraction() 1`] = `
Array [
  Array [
    Object {
      "appId": "mock-app-id",
      "auth": "auth",
      "channelType": undefined,
      "customer": "mock-email",
      "integrationId": "mock-integration-id",
      "logContext": "",
      "metadataSource": undefined,
      "properties": Object {
        "customer": "customer",
      },
      "smoochMessageId": "_id",
      "tenantId": "mock-tenant-id",
      "timestamp": "10",
      "userId": "mock-user-id",
    },
  ],
]
`;

exports[`smooch-webhook handleFormResponse prechat capture throws an error when there is a problem creating interaction 1`] = `"Failed to create an interaction"`;

exports[`smooch-webhook handleFormResponse prechat capture throws an error when there problem retrieving digital channels credentials (form SmoochCore) 1 1`] = `"An Error has occurred trying to retrieve digital channels credentials"`;

exports[`smooch-webhook handleFormResponse prechat capture throws an error when there problem retrieving digital channels credentials 1`] = `"An Error has occurred trying to retrieve digital channels credentials (form getSecretValue())"`;

exports[`smooch-webhook handleFormResponse prechat capture throws an error when there problem updating Smooch appUser 1 1`] = `"Error updating Smooch appUser"`;

exports[`smooch-webhook handler conversation:read calls sendConversationEvent correctly 1`] = `
Array [
  Array [
    Object {
      "auth": Object {
        "id": "mock-secret-id",
        "secret": "mock-secret",
      },
      "conversationEvent": "conversation-read",
      "interactionId": "1",
      "logContext": Object {
        "hasInteractionItem": true,
        "interactionId": "1",
        "smoochAppId": "mock-smooch-app-id",
        "smoochIntegrationId": "mock-integration-id",
        "smoochPlatform": "web",
        "smoochTrigger": "conversation:read",
        "smoochUserId": "mock-app-user-id",
        "tenantId": "mock-tenant-id",
      },
      "tenantId": "mock-tenant-id",
      "timestamp": "mock-timestamp",
    },
  ],
]
`;

exports[`smooch-webhook handler message:appUser web file calls handleCustomerMessage correctly 1`] = `
Array [
  Array [
    Object {
      "appId": "mock-smooch-app-id",
      "auth": Object {
        "id": "mock-secret-id",
        "secret": "mock-secret",
      },
      "channelType": "messaging",
      "hasInteractionItem": true,
      "integrationId": "mock-integration-id",
      "interactionId": "1",
      "logContext": Object {
        "collectActions": undefined,
        "hasInteractionItem": true,
        "interactionId": "1",
        "smoochAppId": "mock-smooch-app-id",
        "smoochIntegrationId": "mock-integration-id",
        "smoochMessageId": undefined,
        "smoochMessageType": "file",
        "smoochPlatform": "web",
        "smoochTrigger": "message:appUser",
        "smoochUserId": "mock-app-user-id",
        "tenantId": "mock-tenant-id",
      },
      "message": Object {
        "fields": Array [
          Object {},
        ],
        "type": "file",
      },
      "metadataSource": "web",
      "properties": Object {
        "customer": "mock-customer",
        "tenantId": "mock-tenant-id",
      },
      "tenantId": "mock-tenant-id",
      "type": "file",
      "userId": "mock-app-user-id",
    },
  ],
]
`;

exports[`smooch-webhook handler message:appUser web formResponse calls handleFormResponse correctly 1`] = `
Array [
  Array [
    Object {
      "appId": "mock-smooch-app-id",
      "auth": Object {
        "id": "mock-secret-id",
        "secret": "mock-secret",
      },
      "channelType": "messaging",
      "form": Object {
        "fields": Array [
          Object {},
        ],
        "name": "mock-name",
        "type": "formResponse",
      },
      "integrationId": "mock-integration-id",
      "interactionId": "1",
      "logContext": Object {
        "collectActions": undefined,
        "hasInteractionItem": true,
        "interactionId": "1",
        "smoochAppId": "mock-smooch-app-id",
        "smoochIntegrationId": "mock-integration-id",
        "smoochMessageId": undefined,
        "smoochMessageType": "formResponse",
        "smoochPlatform": "web",
        "smoochTrigger": "message:appUser",
        "smoochUserId": "mock-app-user-id",
        "tenantId": "mock-tenant-id",
      },
      "metadataSource": "web",
      "properties": Object {
        "customer": "mock-customer",
        "tenantId": "mock-tenant-id",
      },
      "tenantId": "mock-tenant-id",
      "userId": "mock-app-user-id",
    },
  ],
]
`;

exports[`smooch-webhook handler message:appUser web image calls handleCustomerMessage correctly 1`] = `
Array [
  Array [
    Object {
      "appId": "mock-smooch-app-id",
      "auth": Object {
        "id": "mock-secret-id",
        "secret": "mock-secret",
      },
      "channelType": "messaging",
      "hasInteractionItem": true,
      "integrationId": "mock-integration-id",
      "interactionId": "1",
      "logContext": Object {
        "collectActions": undefined,
        "hasInteractionItem": true,
        "interactionId": "1",
        "smoochAppId": "mock-smooch-app-id",
        "smoochIntegrationId": "mock-integration-id",
        "smoochMessageId": undefined,
        "smoochMessageType": "image",
        "smoochPlatform": "web",
        "smoochTrigger": "message:appUser",
        "smoochUserId": "mock-app-user-id",
        "tenantId": "mock-tenant-id",
      },
      "message": Object {
        "fields": Array [
          Object {},
        ],
        "type": "image",
      },
      "metadataSource": "web",
      "properties": Object {
        "customer": "mock-customer",
        "tenantId": "mock-tenant-id",
      },
      "tenantId": "mock-tenant-id",
      "type": "image",
      "userId": "mock-app-user-id",
    },
  ],
]
`;

exports[`smooch-webhook handler message:appUser web text calls handleCustomerMessage correctly 1`] = `
Array [
  Array [
    Object {
      "appId": "mock-smooch-app-id",
      "auth": Object {
        "id": "mock-secret-id",
        "secret": "mock-secret",
      },
      "channelType": "messaging",
      "hasInteractionItem": true,
      "integrationId": "mock-integration-id",
      "interactionId": "1",
      "logContext": Object {
        "collectActions": undefined,
        "hasInteractionItem": true,
        "interactionId": "1",
        "smoochAppId": "mock-smooch-app-id",
        "smoochIntegrationId": "mock-integration-id",
        "smoochMessageId": undefined,
        "smoochMessageType": "text",
        "smoochPlatform": "web",
        "smoochTrigger": "message:appUser",
        "smoochUserId": "mock-app-user-id",
        "tenantId": "mock-tenant-id",
      },
      "message": Object {
        "fields": Array [
          Object {},
        ],
        "type": "text",
      },
      "metadataSource": "web",
      "properties": Object {
        "customer": "mock-customer",
        "tenantId": "mock-tenant-id",
      },
      "tenantId": "mock-tenant-id",
      "type": "text",
      "userId": "mock-app-user-id",
    },
  ],
]
`;

exports[`smooch-webhook handler throws an error when there is a problem getting smooch interaction records 1`] = `"Failed to get smooch interaction record"`;

exports[`smooch-webhook handler throws an error when there is a problem retrieving cx credentials 1`] = `"An Error has occurred trying to retrieve cx credentials"`;

exports[`smooch-webhook handler typing:appUser calls sendConversationEvent correctly 1`] = `
Array [
  Array [
    Object {
      "auth": Object {
        "id": "mock-secret-id",
        "secret": "mock-secret",
      },
      "conversationEvent": "typing-start",
      "interactionId": "1",
      "logContext": Object {
        "hasInteractionItem": true,
        "interactionId": "1",
        "smoochAppId": "mock-smooch-app-id",
        "smoochIntegrationId": "mock-integration-id",
        "smoochPlatform": "web",
        "smoochTrigger": "typing:appUser",
        "smoochUserId": "mock-app-user-id",
        "tenantId": "mock-tenant-id",
      },
      "tenantId": "mock-tenant-id",
      "timestamp": "mock-timestamp",
    },
  ],
]
`;

exports[`smooch-webhook handler walkthrough calls docClient.get correctly 1`] = `
Array [
  Array [
    Object {
      "Key": Object {
        "SmoochUserId": "mock-app-user-id",
      },
      "TableName": "us-east-1-dev-smooch-interactions",
    },
  ],
]
`;

exports[`smooch-webhook handler walkthrough calls getSecretValue correctly 1`] = `
Array [
  Array [
    Object {
      "SecretId": "us-east-1-dev-smooch-cx",
    },
  ],
]
`;

exports[`smooch-webhook sendConversationEvent calls getMetadata correctly 1`] = `
Array [
  Array [
    Object {
      "auth": "auth",
      "method": "get",
      "url": "https://us-east-1-dev-edge.domain/v1/tenants/mock-tenant-id/interactions/mock-interaction-id/metadata",
    },
  ],
]
`;

exports[`smooch-webhook sendConversationEvent calls sqs.getQueueUrl correctly 1`] = `
Array [
  Array [
    Object {
      "QueueName": "mock-tenant-id_mock-resource-id",
    },
  ],
]
`;

exports[`smooch-webhook sendConversationEvent calls sqs.sendMessage correctly 1`] = `
Array [
  Array [
    Object {
      "MessageBody": "{\\"tenantId\\":\\"mock-tenant-id\\",\\"interactionId\\":\\"mock-interaction-id\\",\\"actionId\\":\\"mock-uuid-v1\\",\\"subId\\":\\"mock-uuid-v1\\",\\"type\\":\\"send-message\\",\\"resourceId\\":\\"mock-resource-id\\",\\"sessionId\\":\\"mock-session-id\\",\\"messageType\\":\\"typing-stop\\",\\"message\\":{\\"timestamp\\":10000}}",
      "QueueUrl": "url://testurl",
    },
  ],
]
`;

exports[`smooch-webhook sendConversationEvent calls updateSmoochClientLastActivity correctly when conversationEvent is 'typing-stop' 1`] = `
Array [
  Array [
    Object {
      "latestCustomerMessageTimestamp": "00:00:00",
      "logContext": Object {
        "smoochUserId": "mock-smooch-user-id",
      },
      "userId": "mock-smooch-user-id",
    },
  ],
]
`;

exports[`smooch-webhook sendConversationEvent calls updateSmoochClientLastActivity correctly when conversationEvent is not equal to 'conversation-read' 1`] = `
Array [
  Array [
    Object {
      "latestCustomerMessageTimestamp": 10000,
      "logContext": Object {
        "smoochUserId": "mock-smooch-user-id",
      },
      "userId": "mock-smooch-user-id",
    },
  ],
]
`;

exports[`smooch-webhook sendConversationEvent throws an error when there is problem sending conversation event to participants 1`] = `"Error sending conversation event to participants"`;

exports[`smooch-webhook sendCustomerMessageToParticipants calls getMetadata correctly 1`] = `
Array [
  Array [
    Object {
      "auth": "auth",
      "method": "get",
      "url": "https://us-east-1-dev-edge.domain/v1/tenants/mock-tenant-id/interactions/mock-interaction-id/metadata",
    },
  ],
]
`;

exports[`smooch-webhook sendCustomerMessageToParticipants calls sqs.getQueueUrl correctly 1`] = `
Array [
  Array [
    Object {
      "QueueName": "mock-tenant-id_mock-resource-id",
    },
  ],
  Array [
    Object {
      "QueueName": "us-east-1-dev-upload-artifact-file",
    },
  ],
  Array [
    Object {
      "QueueName": "us-east-1-dev-send-reporting-event",
    },
  ],
]
`;

exports[`smooch-webhook sendCustomerMessageToParticipants calls sqs.sendMessage correctly 1`] = `
Array [
  Array [
    Object {
      "MessageBody": "{\\"tenantId\\":\\"mock-tenant-id\\",\\"interactionId\\":\\"mock-interaction-id\\",\\"actionId\\":\\"mock-uuid-v1\\",\\"subId\\":\\"mock-uuid-v1\\",\\"type\\":\\"send-message\\",\\"resourceId\\":\\"mock-resource-id\\",\\"sessionId\\":\\"mock-session-id\\",\\"messageType\\":\\"received-message\\",\\"message\\":{\\"id\\":\\"_id\\",\\"from\\":\\"mock-name\\",\\"contentType\\":\\"contentType\\",\\"timestamp\\":10000,\\"type\\":\\"customer\\",\\"text\\":\\"text\\",\\"file\\":{\\"mediaUrl\\":\\"mediaUrl\\",\\"mediaType\\":\\"mediaType\\",\\"mediaSize\\":\\"mediaSize\\"}}}",
      "QueueUrl": "url://testurl",
    },
  ],
  Array [
    Object {
      "MessageBody": "{\\"source\\":\\"customer\\",\\"artifactId\\":\\"mock-artifact-id\\",\\"fileData\\":{\\"filename\\":\\"mediaUrl\\",\\"contentType\\":\\"mediaType\\"},\\"message\\":{\\"_id\\":\\"_id\\",\\"name\\":\\"mock-name\\",\\"text\\":\\"text\\",\\"received\\":10,\\"mediaUrl\\":\\"mediaUrl\\",\\"mediaType\\":\\"mediaType\\",\\"mediaSize\\":\\"mediaSize\\",\\"type\\":\\"file\\"}}",
      "QueueUrl": "url://testurl",
    },
  ],
  Array [
    Object {
      "MessageBody": "{\\"topic\\":\\"customer-message\\",\\"appName\\":\\"us-east-1-dev-smooch-webhook\\"}",
      "QueueUrl": "url://testurl",
    },
  ],
]
`;

exports[`smooch-webhook sendCustomerMessageToParticipants throws an error when there is a problem sending message to participants 1`] = `"Error sending message to participants"`;

exports[`smooch-webhook updateSmoochClientLastActivity calls docClient.update correctly 1`] = `
Array [
  Array [
    Object {
      "ExpressionAttributeValues": Object {
        ":t": 10,
      },
      "Key": Object {
        "SmoochUserId": "mock-user-id",
      },
      "ReturnValues": "UPDATED_NEW",
      "TableName": "us-east-1-dev-smooch-interactions",
      "UpdateExpression": "set LatestCustomerMessageTimestamp = :t",
    },
  ],
]
`;
