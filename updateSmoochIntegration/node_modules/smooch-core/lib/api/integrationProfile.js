'use strict';

exports.__esModule = true;
exports.IntegrationProfileApi = undefined;

var _base = require('./base');

var _smoochMethod = require('../utils/smoochMethod');

var _smoochMethod2 = _interopRequireDefault(_smoochMethod);

var _integrationProfilePhoto = require('./integrationProfilePhoto');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * @constructor
 * @name IntegrationProfileApi
 * @extends BaseApi
 */
var IntegrationProfileApi = exports.IntegrationProfileApi = function (_BaseApi) {
    _inherits(IntegrationProfileApi, _BaseApi);

    function IntegrationProfileApi() {
        _classCallCheck(this, IntegrationProfileApi);

        var _this = _possibleConstructorReturn(this, _BaseApi.apply(this, arguments));

        _this.allowedAuth = ['jwt'];
        _this.photo = new (Function.prototype.bind.apply(_integrationProfilePhoto.IntegrationProfilePhotoApi, [null].concat(Array.prototype.slice.call(arguments))))();
        return _this;
    }

    IntegrationProfileApi.prototype.validateProfile = function validateProfile(profile) {
        if (!profile) {
            throw new Error('Must provide profile.');
        }
    };

    return IntegrationProfileApi;
}(_base.BaseApi);

Object.assign(IntegrationProfileApi.prototype, {
    /**
     * Get an integration's profile
     * @memberof IntegrationProfileApi.prototype
     * @method get
     * @param {object} profile
     * @return {APIResponse}
     */
    get: (0, _smoochMethod2.default)({
        params: ['integrationId'],
        path: '/integrations/:integrationId/profile',
        method: 'GET'
    }),

    /**
     * Update an integration's profile
     * @memberof IntegrationProfileApi.prototype
     * @method update
     * @param  {object} profile
     * @return {APIResponse}
     */
    update: (0, _smoochMethod2.default)({
        params: ['integrationId', 'profile'],
        path: '/integrations/:integrationId/profile',
        func: function update(url, integrationId, profile) {
            this.validateProfile(profile);
            return this.request('PUT', url, profile);
        }
    })
});