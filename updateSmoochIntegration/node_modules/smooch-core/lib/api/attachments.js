'use strict';

exports.__esModule = true;
exports.AttachmentsApi = undefined;

var _base = require('./base');

var _smoochMethod = require('../utils/smoochMethod');

var _smoochMethod2 = _interopRequireDefault(_smoochMethod);

var _formData = require('../utils/formData');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * @constructor
 * @name AttachmentsApi
 * @extends BaseApi
 */
var AttachmentsApi = exports.AttachmentsApi = function (_BaseApi) {
    _inherits(AttachmentsApi, _BaseApi);

    function AttachmentsApi() {
        _classCallCheck(this, AttachmentsApi);

        var _this = _possibleConstructorReturn(this, _BaseApi.apply(this, arguments));

        _this.allowedAuth = ['jwt'];
        return _this;
    }

    return AttachmentsApi;
}(_base.BaseApi);

Object.assign(AttachmentsApi.prototype, {
    /**
     * Create an attachment
     * @memberof AttachmentsApi.prototype
     * @method create
     * @param  {Object|string} queryParams
     * @param  {Readable} source
     * @return {APIResponse}
     */
    create: (0, _smoochMethod2.default)({
        params: ['props', 'source'],
        path: '/attachments',
        func: function create(url, queryParamsOrAccess, source) {
            // back compat, this is the access param
            if (typeof queryParamsOrAccess === 'string') {
                url += '?access=' + queryParamsOrAccess;
            } else {
                var access = queryParamsOrAccess.access,
                    attachmentFor = queryParamsOrAccess.for,
                    userId = queryParamsOrAccess.userId,
                    appUserId = queryParamsOrAccess.appUserId;

                url += '?access=' + access;

                if (attachmentFor) {
                    url += '&for=' + attachmentFor;
                }

                if (userId) {
                    url += '&userId=' + userId;
                }

                if (appUserId) {
                    url += '&appUserId=' + appUserId;
                }
            }

            return this.request('POST', url, (0, _formData.getFormData)(source));
        }
    }),

    /**
     * Remove an attachment
     * @memberof AttachmentsApi.prototype
     * @method delete
     * @param  {string} mediaUrl
     * @return {APIResponse}
     */
    delete: (0, _smoochMethod2.default)({
        params: ['mediaUrl'],
        path: '/attachments/remove',
        func: function deleteAttachment(url, mediaUrl) {
            return this.request('POST', url, {
                mediaUrl: mediaUrl
            });
        }
    })
});