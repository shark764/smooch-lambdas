import * as httpMock from '../../mocks/http';
import { getAuthenticationHeaders } from '../../../src/utils/auth';
import { DeploymentsApi } from '../../../src/api/deployments';
import { testJwt } from '../../mocks/jwt';
import { buildTestHeaders } from '../testHeadersBuilder';
import packageInfo from '../../../package.json';

describe('Deployments API', () => {
    const serviceUrl = 'http://some-url.com';
    const missingParams = 'incorrect number of parameters';
    const authHeaders = getAuthenticationHeaders({
        jwt: testJwt(),
    });
    const scope = 'account';
    let httpSpy;
    let api;

    beforeEach(() => {
        httpSpy = httpMock.mock();
        api = new DeploymentsApi({ serviceUrl, authHeaders, scope, VERSION: packageInfo.version });
    });

    afterEach(() => {
        httpMock.restore();
    });

    describe('#create', () => {
        it('should throw if props are not provided', () => {
            expect(() => api.create()).to.throw(Error, missingParams);
        });

        it('should throw if props are empty', () => {
            expect(() => api.create({})).to.throw(Error, 'props missing required field hosting');
        });

        describe('hosting smooch', () => {
            it('should call http', () => {
                const props = { hosting: 'smooch' };
                return api.create(props).then(() => {
                    const url = `${serviceUrl}/v1.1/whatsapp/deployments`;
                    httpSpy.should.have.been.calledWith('POST', url, props, buildTestHeaders(authHeaders));
                });
            });
        });

        describe('hosting self hosted', () => {
            it('should throw if missing required parameters', () => {
                expect(() => api.create({ hosting: 'self' })).to.throw(
                    Error,
                    'deployment has missing required keys: baseUrl, username, password',
                );
            });

            it('should call http', () => {
                const props = { hosting: 'smooch' };
                return api.create(props).then(() => {
                    const url = `${serviceUrl}/v1.1/whatsapp/deployments`;
                    httpSpy.should.have.been.calledWith('POST', url, props, buildTestHeaders(authHeaders));
                });
            });
        });
    });

    describe('#activate', () => {
        let deploymentId;

        beforeEach(() => {
            deploymentId = 'deploymentId_123456';
        });

        it('should throw if no parameters are provided', () => {
            expect(() => api.activate()).to.throw(Error, missingParams);
        });

        it('should throw if verifiedNameCertificate is missing', () => {
            expect(() => api.activate(deploymentId, undefined, '123456789', 'voice')).to.throw(
                Error,
                'Must provide a verifiedNameCertificate to activate your deployment.',
            );
        });

        it('should throw if phoneNumber is missing', () => {
            expect(() => api.activate(deploymentId, 'some certificate name', undefined, 'voice')).to.throw(
                Error,
                'Must provide a phoneNumber to activate your deployment.',
            );
        });

        it('should throw if method is missing', () => {
            expect(() => api.activate(deploymentId, 'some certificate name', '123456789', undefined)).to.throw(
                Error,
                'Must provide a method to activate your deployment.',
            );
        });

        it('should throw if method is not either voice or sms', () => {
            expect(() => api.activate(deploymentId, 'some certificate name', '123456789', 'invalid')).to.throw(
                Error,
                'method must be either voice or sms.',
            );
        });

        it('should call http', () => {
            return api.activate(deploymentId, 'some certificate name', '123456789', 'voice').then(() => {
                const url = `${serviceUrl}/v1.1/whatsapp/deployments/${deploymentId}/activate`;
                httpSpy.should.have.been.calledWith(
                    'POST',
                    url,
                    { verifiedNameCertificate: 'some certificate name', phoneNumber: '123456789', method: 'voice' },
                    buildTestHeaders(authHeaders),
                );
            });
        });
    });

    describe('#confirmCode', () => {
        let deploymentId;

        beforeEach(() => {
            deploymentId = 'deploymentId_123456';
        });

        it('should throw if no parameters are provided', () => {
            expect(() => api.confirmCode()).to.throw(Error, missingParams);
        });

        it('should throw if code is missing', () => {
            expect(() => api.confirmCode(deploymentId, undefined)).to.throw(
                Error,
                'Must provide a code to confirm your phone number.',
            );
        });

        it('should call http', () => {
            return api.confirmCode(deploymentId, '123456').then(() => {
                const url = `${serviceUrl}/v1.1/whatsapp/deployments/${deploymentId}/code/confirm`;
                httpSpy.should.have.been.calledWith('POST', url, { code: '123456' }, buildTestHeaders(authHeaders));
            });
        });
    });

    describe('#list', () => {
        it('should call http', () => {
            return api.list().then(() => {
                const url = `${serviceUrl}/v1.1/whatsapp/deployments`;
                httpSpy.should.have.been.calledWith('GET', url, undefined, buildTestHeaders(authHeaders));
            });
        });
    });

    describe('#get', () => {
        it('should call http', () => {
            const deploymentId = 'deploymentId_123456';
            return api.get(deploymentId).then(() => {
                const url = `${serviceUrl}/v1.1/whatsapp/deployments/${deploymentId}`;
                httpSpy.should.have.been.calledWith('GET', url, undefined, buildTestHeaders(authHeaders));
            });
        });

        it('should throw if missing integrationId', () => {
            expect(() => api.get()).to.throw(Error, missingParams);
        });
    });

    describe('#delete', () => {
        it('should call http', () => {
            const deploymentId = 'deploymentId_123456';
            return api.delete(deploymentId).then(() => {
                const url = `${serviceUrl}/v1.1/whatsapp/deployments/${deploymentId}`;
                httpSpy.should.have.been.calledWith('DELETE', url, undefined, buildTestHeaders(authHeaders));
            });
        });

        it('should throw error if missing integrationId', () => {
            expect(() => api.delete()).to.throw(Error, missingParams);
        });
    });
});
