import hat from 'hat';

import * as httpMock from '../../mocks/http';
import { getAuthenticationHeaders } from '../../../src/utils/auth';
import { IntegrationProfileApi } from '../../../src/api/integrationProfile';
import { testJwt } from '../../mocks/jwt';
import { buildTestHeaders } from '../testHeadersBuilder';
import packageInfo from '../../../package.json';
import { IntegrationProfilePhotoApi } from '../../../src/api/integrationProfilePhoto';

describe('Integration Profile API', function() {
    const serviceUrl = 'http://some-url.com';
    const missingParams = 'incorrect number of parameters';
    const authHeaders = getAuthenticationHeaders({
        jwt: testJwt(),
    });
    const scope = 'account';
    const appId = hat();
    const integrationId = hat();
    let httpSpy;
    let api;

    beforeEach(function() {
        httpSpy = httpMock.mock();
        api = new IntegrationProfileApi({
            serviceUrl,
            authHeaders,
            scope,
            VERSION: packageInfo.version,
        });
    });

    afterEach(function() {
        httpMock.restore();
    });

    describe('#constructor', () => {
        it('should expose an IntegrationProfilePhotoApi', () => {
            expect(api.photo).to.exist;
            api.photo.should.be.instanceof(IntegrationProfilePhotoApi);
        });
    });

    describe('#get', () => {
        it('should call http', () => {
            const integrationId = 'integration_123456';
            return api.get(appId, integrationId).then(() => {
                const url = `${serviceUrl}/v1.1/apps/${appId}/integrations/${integrationId}/profile`;
                httpSpy.should.have.been.calledWith('GET', url, undefined, buildTestHeaders(authHeaders));
            });
        });

        it('should throw if missing integrationId', () => {
            expect(() => api.get(appId)).to.throw(Error, missingParams);
        });
    });

    describe('#update', function() {
        const fullUrl = `${serviceUrl}/v1.1/apps/${appId}/integrations/${integrationId}/profile`;
        let profile;

        beforeEach(function() {
            profile = {
                about: hat(),
                address: hat(),
                description: hat(),
                email: `gordon@${hat()}.free`,
                vertical: hat(),
                websites: [`https://www.${hat()}.fun`],
                photoUrl: `https://www.${hat()}.fun/image.jpeg`,
            };
        });

        describe('object syntax', function() {
            it('should call http', function() {
                return api
                    .update({
                        appId,
                        integrationId,
                        profile,
                    })
                    .then(() => {
                        httpSpy.should.have.been.calledWith('PUT', fullUrl, profile, buildTestHeaders(authHeaders));
                    });
            });

            it('should return an error if no profile', function() {
                let error;

                try {
                    api.update({
                        appId,
                        integrationId,
                        profile: undefined,
                    });
                } catch (e) {
                    error = e;
                }

                expect(error).to.exist;
                error.message.should.equal('update: missing required argument: profile');
            });
        });

        describe('non-object syntax', function() {
            it('should call http with non-object syntax', function() {
                return api.update(appId, integrationId, profile).then(() => {
                    httpSpy.should.have.been.calledWith('PUT', fullUrl, profile, buildTestHeaders(authHeaders));
                });
            });

            it('should return an error if no profile', function() {
                let error;

                try {
                    api.update(appId, integrationId, undefined);
                } catch (e) {
                    error = e;
                }

                expect(error).to.exist;
                error.message.should.equal('Must provide profile.');
            });
        });
    });
});
