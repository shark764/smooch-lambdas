import * as httpMock from '../../mocks/http';
import { getAuthenticationHeaders } from '../../../src/utils/auth';
import { MenuApi } from '../../../src/api/menu';
import { testJwt } from '../../mocks/jwt';
import { buildTestHeaders } from '../testHeadersBuilder';
import packageInfo from '../../../package.json';

describe('Menu API', () => {
    const serviceUrl = 'http://some-url.com';
    const noPropsMessage = 'Must provide props.';
    const noItemsMessage = 'Must provide an array of items.';
    const authHeaders = getAuthenticationHeaders({
        jwt: testJwt(),
    });
    let httpSpy;
    let api;

    beforeEach(() => {
        httpSpy = httpMock.mock();
        api = new MenuApi({
            serviceUrl,
            authHeaders,
            VERSION: packageInfo.version,
        });
    });

    afterEach(() => {
        httpMock.restore();
    });

    describe('#get', () => {
        it('should call http', () => {
            return api.get().then(() => {
                const fullUrl = `${serviceUrl}/v1.1/menu`;
                httpSpy.should.have.been.calledWith(
                    'GET',
                    fullUrl,
                    undefined,
                    buildTestHeaders(buildTestHeaders(authHeaders)),
                );
            });
        });
    });

    describe('#configure', () => {
        const props = {
            items: [],
            name: 'menieu',
        };

        it('should call http', () => {
            return api.configure(props).then(() => {
                const fullUrl = `${serviceUrl}/v1.1/menu`;
                httpSpy.should.have.been.calledWith(
                    'PUT',
                    fullUrl,
                    props,
                    buildTestHeaders(buildTestHeaders(authHeaders)),
                );
            });
        });

        it('should return an error if no items', () => {
            return api
                .configure({
                    name: 'menieu',
                })
                .should.eventually.be.rejectedWith(noItemsMessage);
        });

        it('should return an error if no props', () => {
            return api.configure(undefined).should.eventually.be.rejectedWith(noPropsMessage);
        });
    });

    describe('#remove', () => {
        it('should call http', () => {
            return api.remove().then(() => {
                const fullUrl = `${serviceUrl}/v1.1/menu`;
                httpSpy.should.have.been.calledWith(
                    'DELETE',
                    fullUrl,
                    undefined,
                    buildTestHeaders(buildTestHeaders(authHeaders)),
                );
            });
        });
    });
});
