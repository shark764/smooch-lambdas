'use strict';

exports.__esModule = true;
exports.DeploymentsApi = undefined;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _base = require('./base');

var _smoochMethod = require('../utils/smoochMethod');

var _smoochMethod2 = _interopRequireDefault(_smoochMethod);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function transformProps(val) {
    if (typeof val === 'string') {
        return {
            name: val,
            type: 'string'
        };
    }

    return val;
}

/**
 * Deployments API properties
 * @typedef DeploymentProps
 */
function DeploymentHosting(required) {
    var optional = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

    //convert parameter string values to object
    this.required = required.map(transformProps);
    this.optional = optional.map(transformProps);
}

DeploymentHosting.prototype.validate = function (props) {
    var missing = this.required.filter(function (field) {
        return !props[field.name];
    });

    if (missing.length > 0) {
        var keys = missing.map(function (val) {
            return val.name;
        });

        throw new Error('deployment has missing required keys: ' + keys.join(', '));
    }

    var both = [].concat(this.required, this.optional);
    var invalid = [];

    both.forEach(function (val) {
        if (props[val.name] !== undefined && _typeof(props[val.name]) !== val.type) {
            invalid.push(val);
        }
    });

    if (invalid.length > 0) {
        throw new Error('deployment has invalid types: ' + JSON.stringify(invalid));
    }
};

var deployments = {
    smooch: new DeploymentHosting([], ['callbackUrl']),
    self: new DeploymentHosting(['baseUrl', 'username', 'password'], ['callbackUrl'])
};

/**
 * @constructor
 * @name DeploymentsApi
 * @extends BaseApi
 */

var DeploymentsApi = exports.DeploymentsApi = function (_BaseApi) {
    _inherits(DeploymentsApi, _BaseApi);

    function DeploymentsApi() {
        _classCallCheck(this, DeploymentsApi);

        var _this = _possibleConstructorReturn(this, _BaseApi.apply(this, arguments));

        _this.requireAppId = false;
        _this.allowedAuth = ['jwt'];
        return _this;
    }

    DeploymentsApi.prototype.validateProps = function validateProps(props) {
        if (!props.hosting) {
            throw new Error('props missing required field hosting');
        }

        var deploymentHosting = deployments[props.hosting];
        if (!deploymentHosting) {
            throw new Error('Unrecognized type: ' + props.hosting);
        }

        deploymentHosting.validate(props);
    };

    DeploymentsApi.prototype.validateActivateProps = function validateActivateProps(_ref) {
        var verifiedNameCertificate = _ref.verifiedNameCertificate,
            phoneNumber = _ref.phoneNumber,
            method = _ref.method;

        if (!verifiedNameCertificate) {
            throw new Error('Must provide a verifiedNameCertificate to activate your deployment.');
        }

        if (!phoneNumber) {
            throw new Error('Must provide a phoneNumber to activate your deployment.');
        }

        if (!method) {
            throw new Error('Must provide a method to activate your deployment.');
        }

        if (method !== 'voice' && method !== 'sms') {
            throw new Error('method must be either voice or sms.');
        }
    };

    DeploymentsApi.prototype.validateConfirmCodeProps = function validateConfirmCodeProps(_ref2) {
        var code = _ref2.code;

        if (!code) {
            throw new Error('Must provide a code to confirm your phone number.');
        }
    };

    return DeploymentsApi;
}(_base.BaseApi);

Object.assign(DeploymentsApi.prototype, {
    /**
     * Create a new deployment
     * @memberof DeploymentApi.prototype
     * @method create
     * @param  {DeploymentProps} props
     * @return {APIResponse}
     */
    create: (0, _smoochMethod2.default)({
        params: ['props'],
        path: '/whatsapp/deployments',
        func: function create(url, props) {
            this.validateProps(props);
            return this.request('POST', url, props);
        }
    }),

    /**
     * Fetch the deployments currently configured
     * @memberof DeploymentsApi.prototype
     * @method list
     * @return {APIResponse}
     */
    list: (0, _smoochMethod2.default)({
        params: [],
        path: '/whatsapp/deployments',
        method: 'GET'
    }),

    /**
     * Retrieve an existing deployment
     * @memberof DeploymentsApi.prototype
     * @method get
     * @param  {string} deploymentId
     * @return {APIResponse}
     */
    get: (0, _smoochMethod2.default)({
        params: ['deploymentId'],
        path: '/whatsapp/deployments/:deploymentId',
        method: 'GET'
    }),

    /**
     * Activate the phone number
     * @memberof DeploymentsApi.prototype
     * @method activate
     * @param  {string} deploymentId
     * @param  {string} verifiedNameCertificate
     * @param  {string} phoneNumber
     * @param  {string} method
     * @return {APIResponse}
     */
    activate: (0, _smoochMethod2.default)({
        params: ['deploymentId', 'verifiedNameCertificate', 'phoneNumber', 'method'],
        path: '/whatsapp/deployments/:deploymentId/activate',
        func: function activate(url, deploymentId, verifiedNameCertificate, phoneNumber, method) {
            this.validateActivateProps({ verifiedNameCertificate: verifiedNameCertificate, phoneNumber: phoneNumber, method: method });
            return this.request('POST', url, { verifiedNameCertificate: verifiedNameCertificate, phoneNumber: phoneNumber, method: method });
        }
    }),

    /**
     * Confirm the phone number
     * @memberof DeploymentsApi.prototype
     * @method confirmCode
     * @param  {string} deploymentId
     * @param  {string} code
     * @return {APIResponse}
     */
    confirmCode: (0, _smoochMethod2.default)({
        params: ['deploymentId', 'code'],
        path: '/whatsapp/deployments/:deploymentId/code/confirm',
        func: function confirmCode(url, deploymentId, code) {
            this.validateConfirmCodeProps({ code: code });
            return this.request('POST', url, { code: code });
        }
    }),

    /**
     * Delete an existing deployment
     * @memberof DeploymentsApi.prototype
     * @method delete
     * @param  {string} deploymentId
     * @return {APIResponse}
     */
    delete: (0, _smoochMethod2.default)({
        params: ['deploymentId'],
        path: '/whatsapp/deployments/:deploymentId',
        method: 'DELETE'
    })
});